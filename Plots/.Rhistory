str_interp("Works with } nested { braces too: $[.2f]{{{2 + 2}*{amount}}}")
install.packages("stringr")
interp_test <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_id = ${test_id}")
require("stringr")
interp_test <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_id = ${test_id}")
paste("asd"," ","asd")
require("stringr")
generate_sort_barplot <- function(connection, save_folder, dataset_name) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}'")
result <- dbGetQuery(connection,query_string)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
file_path <- paste(save_folder,"/",dataset_name,".png")
png(file = file_path, width = 1920, height = 1080)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, xlab = dataset_name, horiz = TRUE, cex.names = 0.8)
dev.off()
}
save_folder <- "D:\Plots"
save_folder <- "D:\\Plots"
generate_sort_barplot(con,save_folder,"Random unsorted (10000)")
paste("sdf","xcv")
paste("sdf","xcv", sep = "")
generate_sort_barplot <- function(connection, save_folder, dataset_name) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}'")
result <- dbGetQuery(connection,query_string)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
file_path <- paste(save_folder,"/",dataset_name,".png", sep = "")
png(file = file_path, width = 1920, height = 1080)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, xlab = dataset_name, horiz = TRUE, cex.names = 0.8)
dev.off()
}
generate_sort_barplot(con,save_folder,"Random unsorted (10000)")
generate_sort_barplot(con,save_folder,"Almost sorted (10000)")
seq(1,4)
asd <- seq(1,4)
class(asd)
generate_all_sort_barplots  <- function(connection, save_folder) {
query_string <- "SELECT DISTINCT dataset_name FROM sort_report_comparassion_by_time ORDER BY dataset_name"
result <- dbGetQuery(connection,query_string)
DataSetNames <- result[,c('dataset_name')]
for (DataSetName in DataSetNames)
{
generate_sort_barplot(connection, save_folder, DataSetName)
}
}
generate_sort_barplot <- function(connection, save_folder, dataset_name) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}'")
result <- dbGetQuery(connection,query_string)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
file_path <- paste(save_folder,"/",dataset_name,".png", sep = "")
png(file = file_path, width = 1920, height = 1080)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, xlab = dataset_name, horiz = TRUE, cex.names = 0.8)
dev.off()
}
generate_all_sort_barplots(con,save_folder)
generate_all_sort_barplots  <- function(connection, save_folder, pixelsPerRecord = 20) {
query_string <- "SELECT DISTINCT dataset_name FROM sort_report_comparassion_by_time ORDER BY dataset_name"
result <- dbGetQuery(connection,query_string)
DataSetNames <- result[,c('dataset_name')]
for (DataSetName in DataSetNames)
{
generate_sort_barplot(connection, save_folder, DataSetName)
}
}
generate_sort_barplot <- function(connection, save_folder, dataset_name, pixelsPerRecord = 20) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}'")
result <- dbGetQuery(connection,query_string)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
record_count <- length(Means)
plot_height <- pixelsPerRecord * record_count
plot_width <- plot_height * 1.8
file_path <- paste(save_folder,"/",dataset_name,".png", sep = "")
png(file = file_path, width = plot_width, height = plot_height)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, xlab = dataset_name, horiz = TRUE, cex.names = 0.8)
dev.off()
}
generate_all_sort_barplots(con,save_folder)
generate_all_sort_barplots(con,save_folder,30)
generate_all_sort_barplots(con,save_folder,50)
generate_all_sort_barplots(con,save_folder,100)
debug()
debug(generate_all_sort_barplots)
generate_all_sort_barplots(con,save_folder,100)
require("stringr")
generate_all_sort_barplots  <- function(connection, save_folder, pixelsPerRecord = 20) {
query_string <- "SELECT DISTINCT dataset_name FROM sort_report_comparassion_by_time ORDER BY dataset_name"
result <- dbGetQuery(connection,query_string)
DataSetNames <- result[,c('dataset_name')]
for (DataSetName in DataSetNames)
{
generate_sort_barplot(connection, save_folder, DataSetName, )
}
}
generate_sort_barplot <- function(connection, save_folder, dataset_name, pixelsPerRecord = 20) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}'")
result <- dbGetQuery(connection,query_string)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
record_count <- length(Means)
plot_height <- pixelsPerRecord * record_count
plot_width <- plot_height * 1.8
file_path <- paste(save_folder,"/",dataset_name,".png", sep = "")
png(file = file_path, width = plot_width, height = plot_height)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, xlab = dataset_name, horiz = TRUE, cex.names = 0.8)
dev.off()
}
generate_all_sort_barplots(con,save_folder,30)
generate_all_sort_barplots(con,save_folder,50)
debug(generate_all_sort_barplots)
generate_all_sort_barplots(con,save_folder,50)
generate_all_sort_barplots  <- function(connection, save_folder, pixelsPerRecord = 20) {
query_string <- "SELECT DISTINCT dataset_name FROM sort_report_comparassion_by_time ORDER BY dataset_name"
result <- dbGetQuery(connection,query_string)
DataSetNames <- result[,c('dataset_name')]
for (DataSetName in DataSetNames)
{
generate_sort_barplot(connection, save_folder, DataSetName, pixelsPerRecord)
}
}
generate_sort_barplot <- function(connection, save_folder, dataset_name, pixelsPerRecord = 20) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}'")
result <- dbGetQuery(connection,query_string)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
record_count <- length(Means)
plot_height <- pixelsPerRecord * record_count
plot_width <- plot_height * 1.8
file_path <- paste(save_folder,"/",dataset_name,".png", sep = "")
png(file = file_path, width = plot_width, height = plot_height)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, xlab = dataset_name, horiz = TRUE, cex.names = 0.8)
dev.off()
}
generate_all_sort_barplots(con,save_folder,30)
generate_all_sort_barplots(con,save_folder,40)
require("stringr")
generate_all_sort_barplots  <- function(connection, save_folder, pixelsPerRecord = 20) {
query_string <- "SELECT DISTINCT dataset_name FROM sort_report_comparassion_by_time ORDER BY dataset_name"
result <- dbGetQuery(connection,query_string)
DataSetNames <- result[,c('dataset_name')]
for (DataSetName in DataSetNames)
{
generate_sort_barplot(connection, save_folder, DataSetName, pixelsPerRecord)
}
}
generate_sort_barplot <- function(connection, save_folder, dataset_name, pixelsPerRecord = 20) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}'")
result <- dbGetQuery(connection,query_string)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
record_count <- length(Means)
plot_height <- pixelsPerRecord * record_count
plot_width <- plot_height * 1.8
file_path <- paste(save_folder,"/",dataset_name,".png", sep = "")
png(file = file_path, width = plot_width, height = plot_height)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, xlab = dataset_name, horiz = TRUE, cex.names = 1)
dev.off()
}
generate_all_sort_barplots(con,save_folder,30)
require("stringr")
generate_all_sort_barplots  <- function(connection, save_folder, pixelsPerRecord = 30) {
query_string <- "SELECT DISTINCT dataset_name FROM sort_report_comparassion_by_time ORDER BY dataset_name"
result <- dbGetQuery(connection,query_string)
DataSetNames <- result[,c('dataset_name')]
for (DataSetName in DataSetNames)
{
generate_sort_barplot(connection, save_folder, DataSetName, pixelsPerRecord)
}
}
generate_sort_barplot <- function(connection, save_folder, dataset_name, pixelsPerRecord = 30) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}'")
result <- dbGetQuery(connection,query_string)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
record_count <- length(Means)
plot_height <- pixelsPerRecord * record_count
plot_width <- plot_height * 1.8
file_path <- paste(save_folder,"/",dataset_name,".png", sep = "")
png(file = file_path, width = plot_width, height = plot_height)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, xlab = dataset_name, horiz = TRUE, cex.names = 1)
dev.off()
}
generate_all_sort_barplots(con,save_folder)
generate_all_sort_barplots  <- function(connection, save_folder, maxPosition = 1000, pixelsPerRecord = 30) {
query_string <- "SELECT DISTINCT dataset_name FROM sort_report_comparassion_by_time ORDER BY dataset_name"
result <- dbGetQuery(connection,query_string)
DataSetNames <- result[,c('dataset_name')]
for (DataSetName in DataSetNames)
{
generate_sort_barplot(connection, save_folder, DataSetName, maxPosition, pixelsPerRecord)
}
}
generate_sort_barplot <- function(connection, save_folder, dataset_name, maxPosition = 1000, pixelsPerRecord = 30) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}' AND position < ${maxPosition}")
result <- dbGetQuery(connection,query_string)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
record_count <- length(Means)
plot_height <- pixelsPerRecord * record_count
plot_width <- plot_height * 1.8
file_path <- paste(save_folder,"/",dataset_name,".png", sep = "")
png(file = file_path, width = plot_width, height = plot_height)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, xlab = dataset_name, horiz = TRUE, cex.names = 1)
dev.off()
}
generate_all_sort_barplots(con,save_folder,20)
generate_all_sort_barplots(con,save_folder,45)
require("stringr")
generate_all_sort_barplots  <- function(connection, save_folder, maxPosition = 1000, pixelsPerRecord = 30) {
query_string <- "SELECT DISTINCT dataset_name FROM sort_report_comparassion_by_time ORDER BY dataset_name"
result <- dbGetQuery(connection,query_string)
DataSetNames <- result[,c('dataset_name')]
for (DataSetName in DataSetNames)
{
generate_sort_barplot(connection, save_folder, DataSetName, maxPosition, pixelsPerRecord)
}
}
generate_sort_barplot <- function(connection, save_folder, dataset_name, maxPosition = 1000, pixelsPerRecord = 30) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}' AND position < ${maxPosition}")
result <- dbGetQuery(connection,query_string)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
record_count <- length(Means)
plot_height <- pixelsPerRecord * record_count
plot_width <- plot_height * 1.8
file_path <- paste(save_folder,"/",dataset_name,".png", sep = "")
png(file = file_path, width = plot_width, height = plot_height)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, main = dataset_name, horiz = TRUE, cex.names = 1)
dev.off()
}
generate_all_sort_barplots(con,save_folder,45)
generate_all_sort_barplots(con,save_folder,45)
generate_all_sort_barplots  <- function(connection, save_folder, extra_filter = "", maxPosition = 1000, pixelsPerRecord = 30) {
query_string <- str_interp("SELECT DISTINCT dataset_name FROM sort_report_comparassion_by_time WHERE position < ${maxPosition} ${extra_filter} ORDER BY dataset_name ")
result <- dbGetQuery(connection,query_string)
DataSetNames <- result[,c('dataset_name')]
for (DataSetName in DataSetNames)
{
generate_sort_barplot(connection, save_folder, DataSetName, extra_filter, maxPosition, pixelsPerRecord)
}
}
generate_sort_barplot <- function(connection, save_folder, dataset_name, extra_filter = "",maxPosition = 1000, pixelsPerRecord = 30) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}' AND position < ${maxPosition} ${extra_filter}")
result <- dbGetQuery(connection,query_string)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
record_count <- length(Means)
plot_height <- pixelsPerRecord * record_count
plot_width <- plot_height * 1.8
file_path <- paste(save_folder,"/",dataset_name,".png", sep = "")
png(file = file_path, width = plot_width, height = plot_height)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, main = dataset_name, horiz = TRUE, cex.names = 1)
dev.off()
}
generate_all_sort_barplots(con,save_folder,45)
generate_all_sort_barplots(con,save_folder,"AND sort_name ILIKE '%merge%'")
generate_all_sort_barplots(con,save_folder,"AND sort_name ILIKE '%merge sort%'")
generate_all_sort_barplots(con,save_folder,"AND sort_name ILIKE '%merge sort%' AND NOT sort_name ILIKE '%multi%'")
require("stringr")
generate_all_sort_barplots  <- function(connection, save_folder, extra_filter = "", maxPosition = 1000, pixelsPerRecord = 50) {
query_string <- str_interp("SELECT DISTINCT dataset_name FROM sort_report_comparassion_by_time WHERE position < ${maxPosition} ${extra_filter} ORDER BY dataset_name ")
result <- dbGetQuery(connection,query_string)
DataSetNames <- result[,c('dataset_name')]
for (DataSetName in DataSetNames)
{
generate_sort_barplot(connection, save_folder, DataSetName, extra_filter, maxPosition, pixelsPerRecord)
}
}
generate_sort_barplot <- function(connection, save_folder, dataset_name, extra_filter = "",maxPosition = 1000, pixelsPerRecord = 50) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}' AND position < ${maxPosition} ${extra_filter}")
result <- dbGetQuery(connection,query_string)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
record_count <- length(Means)
plot_height <- pixelsPerRecord * record_count
plot_width <- plot_height * 1.8
file_path <- paste(save_folder,"/",dataset_name,".png", sep = "")
png(file = file_path, width = plot_width, height = plot_height)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, main = dataset_name, horiz = TRUE, cex.names = 1)
dev.off()
}
generate_all_sort_barplots(con,save_folder,"AND sort_name ILIKE '%merge sort%' AND NOT sort_name ILIKE '%multi%'")
debug(generate_all_sort_barplots)
generate_all_sort_barplots(con,save_folder,"AND sort_name ILIKE '%merge sort%' AND NOT sort_name ILIKE '%multi%'")
require("stringr")
generate_all_sort_barplots  <- function(connection, save_folder, extra_filter = "", maxPosition = 1000, pixelsPerRecord = 50) {
query_string <- str_interp("SELECT DISTINCT dataset_name FROM sort_report_comparassion_by_time WHERE position < ${maxPosition} ${extra_filter} ORDER BY dataset_name ")
result <- dbGetQuery(connection,query_string)
DataSetNames <- result[,c('dataset_name')]
for (DataSetName in DataSetNames)
{
generate_sort_barplot(connection, save_folder, DataSetName, extra_filter, maxPosition, pixelsPerRecord)
}
}
generate_sort_barplot <- function(connection, save_folder, dataset_name, extra_filter = "",maxPosition = 1000, pixelsPerRecord = 50) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}' AND position < ${maxPosition} ${extra_filter}")
result <- dbGetQuery(connection,query_string)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
record_count <- length(Means)
plot_height <- pixelsPerRecord * record_count
plot_width <- plot_height * 1.8
file_path <- paste(save_folder,"/",dataset_name,".png", sep = "")
png(file = file_path, width = plot_width, height = plot_height)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, main = dataset_name, horiz = TRUE)
dev.off()
}
generate_all_sort_barplots(con,save_folder,"AND sort_name ILIKE '%merge sort%' AND NOT sort_name ILIKE '%multi%'")
generate_all_sort_barplots  <- function(connection, save_folder, extra_filter = "", maxPosition = 1000, pixelsPerRecord = 50) {
query_string <- str_interp("SELECT DISTINCT dataset_name FROM sort_report_comparassion_by_time WHERE position < ${maxPosition} ${extra_filter} ORDER BY dataset_name ")
result <- dbGetQuery(connection,query_string)
DataSetNames <- result[,c('dataset_name')]
for (DataSetName in DataSetNames)
{
generate_sort_barplot(connection, save_folder, DataSetName, extra_filter, maxPosition, pixelsPerRecord)
}
}
generate_sort_barplot <- function(connection, save_folder, dataset_name, extra_filter = "",maxPosition = 1000, pixelsPerRecord = 50) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}' AND position < ${maxPosition} ${extra_filter}")
result <- dbGetQuery(connection,query_string)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
record_count <- length(Means)
plot_height <- pixelsPerRecord * record_count
plot_width <- plot_height * 1.8
file_path <- paste(save_folder,"/",dataset_name,".png", sep = "")
png(file = file_path, width = plot_width, height = plot_height)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, main = dataset_name, horiz = TRUE, cex.names = 1.5)
dev.off()
}
generate_all_sort_barplots(con,save_folder,"AND sort_name ILIKE '%merge sort%' AND NOT sort_name ILIKE '%multi%'")
generate_all_sort_barplots  <- function(connection, save_folder, extra_filter = "", maxPosition = 1000, pixelsPerRecord = 50) {
query_string <- str_interp("SELECT DISTINCT dataset_name FROM sort_report_comparassion_by_time WHERE position < ${maxPosition} ${extra_filter} ORDER BY dataset_name ")
result <- dbGetQuery(connection,query_string)
DataSetNames <- result[,c('dataset_name')]
for (DataSetName in DataSetNames)
{
generate_sort_barplot(connection, save_folder, DataSetName, extra_filter, maxPosition, pixelsPerRecord)
}
}
generate_sort_barplot <- function(connection, save_folder, dataset_name, extra_filter = "",maxPosition = 1000, pixelsPerRecord = 50) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}' AND position < ${maxPosition} ${extra_filter}")
result <- dbGetQuery(connection,query_string)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
record_count <- length(Means)
plot_height <- pixelsPerRecord * record_count
plot_width <- plot_height * 1.8
file_path <- paste(save_folder,"/",dataset_name,".png", sep = "")
png(file = file_path, width = plot_width, height = plot_height)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, main = dataset_name, horiz = TRUE, cex.names = 1)
dev.off()
}
generate_all_sort_barplots(con,save_folder,"AND sort_name ILIKE '%merge sort%' AND NOT sort_name ILIKE '%multi%'")
install.packages("RPostgres")
library(DBI)
connection <- dbConnect(RPostgres::Postgres(),dbname = 'sort_benchmark_data',
host = 'localhost',
port = 5432,
user = 'db_user',
password = 'upa55')
query_string <- str_interp("SELECT DISTINCT dataset_name FROM sort_report_comparassion_by_time ORDER BY dataset_name ")
res <- dbSendQuery(connection, query_string)
class(res)
dbFetch(res)
ares <- dbFetch(res)
res <- dbSendQuery(connection, query_string)
ares <- dbFetch(res)
class(ares)
connection <- dbConnect(RPostgres::Postgres(),dbname = 'sort_benchmark_data',
host = 'localhost',
port = 5432,
user = 'db_user',
password = 'upa55')
require("stringr")
generate_all_sort_barplots  <- function(connection, save_folder, extra_filter = "", maxPosition = 1000, pixelsPerRecord = 50) {
query_string <- str_interp("SELECT DISTINCT dataset_name FROM sort_report_comparassion_by_time WHERE position < ${maxPosition} ${extra_filter} ORDER BY dataset_name ")
query_result <- dbSendQuery(connection, query_string)
result <- dbFetch(query_result)
dbClearResult(query_result)
DataSetNames <- result[,c('dataset_name')]
for (DataSetName in DataSetNames)
{
generate_sort_barplot(connection, save_folder, DataSetName, extra_filter, maxPosition, pixelsPerRecord)
}
}
generate_sort_barplot <- function(connection, save_folder, dataset_name, extra_filter = "",maxPosition = 1000, pixelsPerRecord = 50) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}' AND position < ${maxPosition} ${extra_filter}")
query_result <- dbSendQuery(connection, query_string)
result <- dbFetch(query_result)
dbClearResult(query_result)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
record_count <- length(Means)
plot_height <- pixelsPerRecord * record_count
plot_width <- plot_height * 1.8
file_path <- paste(save_folder,"/",dataset_name,".png", sep = "")
png(file = file_path, width = plot_width, height = plot_height)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, main = dataset_name, horiz = TRUE, cex.names = 1)
dev.off()
}
generate_all_sort_barplots(con,save_folder,"AND sort_name ILIKE '%merge sort%' AND NOT sort_name ILIKE '%multi%'")
generate_all_sort_barplots(con,save_folder,"AND sort_name ILIKE '%merge sort%' AND NOT sort_name ILIKE '%multi%'")
generate_sort_barplot(connection,save_folder,"Random unsorted (10000)")
generate_all_sort_barplots(con,save_folder) #Generate plot for all data sets
require("stringr")
generate_all_sort_barplots  <- function(connection, save_folder, extra_filter = "", pixelsPerRecord = 50) {
query_string <- str_interp("SELECT DISTINCT dataset_name FROM sort_report_comparassion_by_time WHERE true ${extra_filter} ORDER BY dataset_name ")
query_result <- dbSendQuery(connection, query_string)
result <- dbFetch(query_result)
dbClearResult(query_result)
DataSetNames <- result[,c('dataset_name')]
for (DataSetName in DataSetNames)
{
generate_sort_barplot(connection, save_folder, DataSetName, extra_filter, pixelsPerRecord)
}
}
generate_sort_barplot <- function(connection, save_folder, dataset_name, extra_filter = "", pixelsPerRecord = 50) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}' AND position < ${maxPosition} ${extra_filter}")
query_result <- dbSendQuery(connection, query_string)
result <- dbFetch(query_result)
dbClearResult(query_result)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
record_count <- length(Means)
plot_height <- pixelsPerRecord * record_count
plot_width <- plot_height * 1.8
file_path <- paste(save_folder,"/",dataset_name,".png", sep = "")
png(file = file_path, width = plot_width, height = plot_height)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, main = dataset_name, horiz = TRUE, cex.names = 1)
dev.off()
}
generate_all_sort_barplots(con,save_folder,"AND sort_name ILIKE '%merge sort%' AND NOT sort_name ILIKE '%multi%'")
require("stringr")
generate_all_sort_barplots  <- function(connection, save_folder, extra_filter = "", pixelsPerRecord = 50) {
query_string <- str_interp("SELECT DISTINCT dataset_name FROM sort_report_comparassion_by_time WHERE true ${extra_filter} ORDER BY dataset_name ")
query_result <- dbSendQuery(connection, query_string)
result <- dbFetch(query_result)
dbClearResult(query_result)
DataSetNames <- result[,c('dataset_name')]
for (DataSetName in DataSetNames)
{
generate_sort_barplot(connection, save_folder, DataSetName, extra_filter, pixelsPerRecord)
}
}
generate_sort_barplot <- function(connection, save_folder, dataset_name, extra_filter = "", pixelsPerRecord = 50) {
query_string <- str_interp("SELECT * FROM sort_report_comparassion_by_time WHERE dataset_name = '${dataset_name}' ${extra_filter}")
query_result <- dbSendQuery(connection, query_string)
result <- dbFetch(query_result)
dbClearResult(query_result)
SortNames <- result[,c('sort_name')]
Means <- result[,c('mean')]
record_count <- length(Means)
plot_height <- pixelsPerRecord * record_count
plot_width <- plot_height * 1.8
file_path <- paste(save_folder,"/",dataset_name,".png", sep = "")
png(file = file_path, width = plot_width, height = plot_height)
par(las=1)
par(mai=c(1,3,1,1))
barplot(Means, names.arg = SortNames, main = dataset_name, horiz = TRUE, cex.names = 1)
dev.off()
}
generate_all_sort_barplots(con,save_folder,"AND sort_name ILIKE '%merge sort%' AND NOT sort_name ILIKE '%multi%'")
setwd("D:/Gits/NumberSorter/Plots")
library(DBI)
source("plot_generators.r")
connection <- dbConnect(RPostgres::Postgres(),dbname = 'sort_benchmark_data',
host = 'localhost',
port = 5432,
user = 'db_user',
password = 'upa55')
generate_all_sort_barplots(connection,save_folder)
generate_all_sort_barplots(connection,save_folder)
save_folder <- "D:\\Plots"
generate_all_sort_barplots(connection,save_folder)
generate_all_sort_barplots(connection,save_folder)
