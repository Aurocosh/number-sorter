using System;

namespace NumberSorter.Core.Logic.Algorhythm
{
    public readonly struct SortRun : IEquatable<SortRun>
    {
        public int Start { get; }
        public int Length { get; }

        public int FirstIndex => Start;
        public int MiddleIndex => Start + (Length / 2);
        public int LastIndex => Start + Length - 1;

        public SortRun(int start, int length)
        {
            Start = start;
            Length = length;
        }

        public override string ToString()
        {
            return $"Start: {Start} Length: {Length}";
        }

        public SortRun Expand(int extraLength)
        {
            return new SortRun(Start, Length + extraLength);
        }

        #region Equality stuff generated by ide

        public override bool Equals(object obj)
        {
            return obj is SortRun run && Equals(run);
        }

        public bool Equals(SortRun other)
        {
            return Start == other.Start &&
                   Length == other.Length;
        }

        public override int GetHashCode()
        {
            var hashCode = -1730557556;
            hashCode = (hashCode * -1521134295) + Start.GetHashCode();
            hashCode = (hashCode * -1521134295) + Length.GetHashCode();
            return hashCode;
        }

        public static bool operator ==(SortRun left, SortRun right)
        {
            return left.Equals(right);
        }

        public static bool operator !=(SortRun left, SortRun right)
        {
            return !(left == right);
        }

        #endregion
    }
}